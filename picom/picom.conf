#:===============:#
#:    Shadows    :#
#:===============:#
shadow = false                  # I don't think this follows the rounded corner curve, so it looks really bad.
shadow-radius = 8               # (Default: 12)
shadow-opacity = .68            # (Default: 0.75)
shadow-offset-x = -8            # (Default: -15)
shadow-offset-y = -8            # (Default: -15)
shadow-color = "#040208"        # (Default: "#000000")

# Shadow: Exclude List
shadow-exclude = [
    "name = 'Notification'",
    "class_g = 'Conky'",
    "class_g ?= 'Notify-osd'",
    "class_g = 'Cairo-clock'",
    "_GTK_FRAME_EXTENTS@:c"
]

#:==============:#
#:    Fading    :#
#:==============:#
fading = true                   # Primarily trying to use this to hide annoying screen flashing when swapping workspaces.
fade-in-step = 0.038            # (Default: 0.028)  (Range: 0.01 - 1.0)
fade-out-step = 0.028           # (Default: 0.03)   (Range: 0.01 - 1.0)

# Time Between Fade Steps, in milliseconds.         ( 6ms approximately matches 165hz )
fade-delta = 6                  # (Default: 10)

# Fading: Exclude List
# fade-exclude = []

#:==================:#
#:    Animation     :#
#:==================:#

#: Probably not supported by the picom version I am using.
# animations = true

#:====================================:#
#:    Transparency / Opacity / Dim    :#
#:====================================:#
frame-opacity = 1.0             # (Default: 1.0)    (Range: 0.1 - 1.0)
active-opacity = 1.0            # (Default: 1.0)    (Range: 0.0 - 1.0)
inactive-opacity = 1.0          # (Default: 1.0)    (Range: 0.1 - 1.0)
inactive-opacity-override = false
inactive-dim = 0.0              # (Default: 0.0)    (Range: 0.0 - 1.0)

# Transparency / Opacity: Override List
opacity-rule = [
    "84:class_g = 'kitty'",                 # With blur: `80` is good.
    "84:class_g = 'kitty-scratchpad'",      # With blur: `80` is good.
    "84:class_g = 'neovide'",               # With blur: `80` is good.
    "90:class_g = 'Evince'",                # With blur: `88` is good.
    "96:class_g = 'Zathura'"                # With blur: `94` is good.
]

# Focus: Exclude List
focus-exclude = [ "class_g = 'Cairo-clock'" ]

#:===============:#
#:    Corners    :#
#:===============:#
#: Corner rounding radius.
#: NOTE: This has artifacting when used with blur.
#: Blur is better than this, so disabling rounded corners.
# corner-radius = 12

#: No idea what this is.
# round-borders = 1

# Corners: Exclude List
rounded-corners-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'",
    "class_g = 'firefox'",
    "class_g = 'Thunderbird'",
    "class_g = 'Rofi'"
]

#:===========================:#
#:    Background-Blurring    :#
#:===========================:#
#: These blur settings are good.
blur-background = false
# blur-method = "none"              # To disable.
blur-method = "dual_kawase"         # This is good blur.
blur-size = 12
blur-strength = 4
blur-kern = "3x3box"

#: Not sure what these are exactly.
blur-background-fixed = true
# blur-background-frame = false
# blur-deviation = false            # Standard deviation for Gaussian blur method.

# Blur: Exclude List
blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'",
    "_GTK_FRAME_EXTENTS@:c",
    "class_g ~= 'slop'"             # This is to allow screenshotting with Maim. It works.
]

#:========================:#
#:    General Settings    :#
#:========================:#
# Options: `xrender`, `glx`, `egl` or `xr_glx_hybrid`.
backend = "glx"                     # (Default: "xrender")
vsync = true
#: NOTE: The `refresh-rate` config option is deprecated, so it's been removed.

# Enable remote control via D-Bus. See the man page for more details.
# dbus = true

# Daemonize process. Causes issues with certain (badly-written) drivers.
#: NOTE: I am using the `--daemon` argument. No idea if I should or not.
# daemon = false

#: No idea what these are.
mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
detect-client-opacity = true;

# Use EWMH '_NET_ACTIVE_WINDOW', rather than 'FocusIn'/'FocusOut' events.
# Might have more accuracy, provided that the WM supports it.
use-ewmh-active-win = false          # No idea, have not even tested.

# unredir-if-possible = false
# unredir-if-possible-delay = 0         # (Default: 0)

# Unredirect: Exclude List
# unredir-if-possible-exclude = []

# Use 'WM_TRANSIENT_FOR' to group windows,
# and consider windows in the same group focused at the same time.
detect-transient = false             # No idea. (HERE/TODO: This used to be true, testing false.)

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. This usually means windows from the same application
# will be considered focused or unfocused at the same time.
# 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
#
# detect-client-leader = false

# resize-damage = 1                     # No idea. (1 is correct value for 3x3 blur, but it sounds like there are many bugs related to this.)

# Invert Color: Include List    (Apparently not well tested and resource intensive.)
# invert-color-include = []

# Disable use of stencil buffer for GLX backend.
# May cause transparency related issues.    (But doesn't?)
# Should improve performance.
# Supposedly recommended as "true" if it works.
glx-no-stencil = true                   # No idea what this actually means. Have not tested it yet.

# Disable rebinding pixmap on window damage for GLX backend.
# May break things. (On some drivers)
# May improve performance.
# Supposedly recommended as "true" if it works.
glx-no-rebind-pixmap = true             # No idea what this actually means. Have not tested it yet.

# Redraw whole screen or just the parts of the screen that changed.
#: I would guess that `use-damage = true` means doing partial redraws.
#: TODO => Test this both ways.
#: NOTE: Presumably `use-damage = true` is more likely to cause artifacting, but might increase performance.
use-damage = true

# Use `X Sync Fence` (What?) to sync clients' draw calls,
# to make sure all draw calls are finished before picom starts drawing.
# Needed on Nvidia-Drivers with GLX backend for some users. (?)
#: NOTE: I'm on Nvidia, so I'm gonna test enabling this.
xrender-sync-fence = true

#: Can apparently set a custom shader for something. (GLX Backend)
#: NOTE: Unlikely that I'd touch this.
# window-shader-fg = "default"

# Use rules to set per-window shaders. Syntax is SHADER_PATH:PATTERN, similar
# to opacity-rule. SHADER_PATH can be "default". This overrides window-shader-fg.
#
# window-shader-fg-rule = [
#   "my_shader.frag:window_type != 'dock'"
# ]

# Force all windows to be painted with blending. Useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
# force-win-blend = false

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
# no-ewmh-fullscreen = false

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
#
# max-brightness = 1.0

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
#
# transparent-clipping = false

# Specify a list of conditions of windows that should never have transparent
# clipping applied. Useful for screenshot tools, where you need to be able to
# see through transparent parts of the window.
#
# transparent-clipping-exclude = []

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
# log-level = "debug"
log-level = "warn"

# Set the log file.
# If *--log-file* is never specified, logs will be written to stderr.
# Otherwise, logs will to written to the given file, though some of the early
# logs might still be written to the stderr.
# When setting this option from the config file, it is recommended to use an absolute path.
#
log-file = "/home/aum/.aumlogs/picom/picom-log.txt"

# Show all X errors (for debugging)
# show-all-xerrors = false

# Write process ID to a file.
# write-pid-path = "/path/to/your/log/file"

# Window type settings
#
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".
#
# Following per window-type options are available: ::
#
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
#
#   opacity:::
#     Controls default opacity of the window type.
#
#   focus:::
#     Controls whether the window of this type is to be always considered focused.
#     (By default, all window types except "normal" and "dialog" has this on.)
#
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you
#     normally won't be able to see. Useful when the window has parts of it
#     transparent, and you want shadows in those areas.
#
#   clip-shadow-above:::
#     Controls whether shadows that would have been drawn above the window should
#     be clipped. Useful for dock windows that should have no shadow painted on top.
#
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection,
#     you can set this to `true`.
#
wintypes:
{
    tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
    dock = { shadow = false; clip-shadow-above = true; }
    dnd = { shadow = false; }
    popup_menu = { opacity = 0.8; }
    dropdown_menu = { opacity = 0.8; }
}
