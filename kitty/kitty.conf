# vim:fileencoding=utf-8:foldmethod=marker

#: To list supported fonts: `kitty +list-fonts`

#: JetBrains
font_family         JetBrains Mono SemiBold
italic_font         JetBrains Mono SemiBold Italic
bold_font           JetBrains Mono Bold
bold_italic_font    JetBrains Mono Bold Italic

#: Font size (in pts)
font_size 18

#: Text composition strategy: `legacy` | `platform` | custom:
#: `float` `int` => Ex: 1.0 0
text_composition_strategy 1.32 12

#: `symbol_map`
#: Avoids the need for patched fonts.
#: This option can be specified multiple times.
#: The syntax is::
#:     `symbol_map codepoints Font Family Name`

# Nerd Font Symbol Map
#   - NOTES:
#       - `Symbols Nerd Font Mono`          => Makes icons/symbols look too big.
#       - `JetBrainsMono Nerd Font Mono`    => Makes icons/symbols look too small.
#       - `JetBrainsMono Nerd Font`         => Makes icons/symbols look about perfect.  (Maybe issues with some icons?)
symbol_map U+23FB-U+23FE,U+2665,U+26A1,U+2B58,U+E000-U+E00A,U+E0A0-U+E0A3,U+E0B0-U+E0C8,U+E0CA,U+E0CC-U+E0D2,U+E0D4,U+E200-U+E2A9,U+E300-U+E3E3,U+E5FA-U+E634,U+E700-U+E7C5,U+EA60-U+EBEB,U+F000-U+F2E0,U+F300-U+F32F,U+F400-U+F4A9,U+F500-U+F8FF JetBrainsMono Nerd Font

#: `always` | `never` | `cursor`
disable_ligatures cursor

#: Modify font characteristics such as the position or thickness of
#: the underline and strikethrough. The modifications can have the
#: suffix px for pixels or % for percentage of original value. No
#: suffix means use pts.

modify_font underline_position 2
modify_font underline_thickness 90%
modify_font strikethrough_position 0px

#: Additionally, you can modify the size of the cell in which each font glyph is rendered.
modify_font cell_width 100%
modify_font cell_height 6px


#: The sizes of the lines used for the box drawing Unicode characters.
#: These values are in pts. They will be scaled by the monitor DPI to
#: arrive at a pixel value. There must be four values corresponding to
#: thin, normal, thick, and very thick lines.

# box_drawing_scale 0.001, 1, 1.5, 2


#: The cursor shape can be one of block, beam, underline. Note that
#: when reloading the config this will be changed only if the cursor
#: shape has not been set by the program running in the terminal. This
#: sets the default cursor shape, applications running in the terminal
#: can override it. In particular, shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> in kitty sets
#: the cursor shape to beam at shell prompts. You can avoid this by
#: setting shell_integration to no-cursor.

# cursor_shape block


#: The thickness of the beam cursor (in pts).
cursor_beam_thickness 2.0

#: The thickness of the underline cursor (in pts).
cursor_underline_thickness 2.0

#: The interval to blink the cursor (in seconds). Set to zero to
#: disable blinking. Negative values mean use system default. Note
#: that the minimum interval will be limited to repaint_delay.
cursor_blink_interval 0


#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.
scrollback_lines 2000


#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen. Similarly CURSOR_LINE and
#: CURSOR_COLUMN will be replaced by the current cursor position or
#: set to 0 if there is no cursor, for example, when showing the last
#: command output.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER


#: Separate scrollback history size (in MB), used only for browsing
#: the scrollback buffer with pager. This separate buffer is not
#: available for interactive scrolling but will be piped to the pager
#: program when viewing scrollback buffer in a separate window. The
#: current implementation stores the data in UTF-8, so approximatively
#: 10000 lines per megabyte at 100 chars per line, for pure ASCII,
#: unformatted text. A value of zero or less disables this feature.
#: The maximum allowed size is 4GB. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.
scrollback_pager_history_size 2


#: Fill new space with lines from the scrollback buffer after
#: enlarging a window.

# scrollback_fill_enlarged_window no


#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.
#: Set to a negative value to hide the mouse cursor immediately when
#: typing text. Disabled by default on macOS as getting it to work
#: robustly with the ever-changing sea of bugs that is Cocoa is too
#: much effort.
mouse_hide_wait -1.0


#: The program to open clicked URLs. The special value default means
#: to use the operating system's default URL handler (open on macOS
#: and xdg-open on Linux).

# open_url_with default


#: The set of URL prefixes to look for when detecting a URL under the
#: mouse cursor.

# url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh


#: Detect URLs under the mouse. Detected URLs are highlighted with an
#: underline and the mouse cursor becomes a hand over them. Even if
#: this option is disabled, URLs are still clickable.

# detect_urls yes


#: Additional characters to be disallowed from URLs, when detecting
#: URLs under the mouse cursor. By default, all characters that are
#: legal in URLs are allowed.

# url_excluded_characters


#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, selecting text with the mouse will cause the text to be
#: copied to clipboard. Useful on platforms such as macOS that do not
#: have the concept of primary selection. You can instead specify a
#: name such as a1 to copy to a private kitty buffer. Map a shortcut
#: with the paste_from_buffer action to paste from this private
#: buffer. For example::

#:     copy_on_select a1
#:     map shift+cmd+v paste_from_buffer a1

#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

# copy_on_select no


#: `quote-urls-at-prompt` | `confirm` | `filter`
# paste_actions quote-urls-at-prompt


#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. A value of always will always do it.
strip_trailing_spaces smart


#: START => Mouse Actions

#: See all the mappable actions including mouse actions:
#: [here](https://sw.kovidgoyal.net/kitty/actions/)

#: Remove all mouse action definitions up to this point. Useful, for
#: instance, to remove the default mouse actions.

# clear_all_mouse_actions no

#: END => Mouse Actions


#: Performance Tuning
repaint_delay 5
input_delay 2
sync_to_monitor yes


#: The audio bell. Useful to disable it in environments that require
#: silence.

enable_audio_bell no


#: The visual bell duration (in seconds). Flash the screen when a bell
#: occurs for the specified number of seconds. Set to zero to disable.

# visual_bell_duration 0.0


#: The color used by visual bell. Set to none will fall back to
#: selection background color. If you feel that the visual bell is too
#: bright, you can set it to a darker color.

# visual_bell_color none


#: Request window attention on bell. Makes the dock icon bounce on
#: macOS or the taskbar flash on linux.

# window_alert_on_bell yes


#: Some text or a Unicode symbol to show on the tab if a window in the
#: tab that does not have focus has a bell. If you want to use leading
#: or trailing spaces, surround the text with quotes. See
#: tab_title_template for how this is rendered.

# bell_on_tab "ðŸ”” "


#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400


#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. Default configuration is all
#: layouts in alphabetical order. For a list of available layouts, see
#: the layouts <https://sw.kovidgoyal.net/kitty/overview/#layouts>.

# enabled_layouts *


#: The step size (in units of cell width/cell height) to use when
#: resizing kitty windows in a layout with the shortcut
#: start_resizing_window. The cells value is used for horizontal
#: resizing, and the lines value is used for vertical resizing.

window_resize_step_cells 1
window_resize_step_lines 1


#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. If not specified, the unit is assumed
#: to be pts. Note that borders are displayed only when more than one
#: window is visible. They are meant to separate multiple windows.
window_border_width 2.0pt


#: Draw only the minimum borders needed. This means that only the
#: borders that separate the inactive window from a neighbor are
#: drawn. Note that setting a non-zero window_margin_width overrides
#: this and causes all borders to be drawn.
draw_minimal_borders yes


#: The window margin (in pts) (blank area outside the border). A
#: single value sets all four sides. Two values set the vertical and
#: horizontal sides. Three values set top, horizontal and bottom. Four
#: values set top, right, bottom and left.
window_margin_width 0.0


#: The window margin to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_margin_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.
single_window_margin_width 0.0


#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.
window_padding_width 2 16


#: When the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. You can control how that padding is distributed with
#: this option. Using a value of center means the cell area will be
#: placed centrally. A value of top-left means the padding will be
#: only at the bottom and right edges.
placement_strategy center


#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).
#: NOTE/TAG: "Dim inactive window/text"
inactive_text_alpha 0.6


#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only can be used to only hide the titlebar.
#: Whether this works and exactly what effect it has depends on the
#: window manager/operating system. Note that the effects of changing
#: this option when reloading config are undefined.

# hide_window_decorations no


#: Path to a logo image. Must be in PNG format. Relative paths are
#: interpreted relative to the kitty config directory. The logo is
#: displayed in a corner of every kitty window. The position is
#: controlled by window_logo_position. Individual windows can be
#: configured to have different logos either using the launch action
#: or the remote control <https://sw.kovidgoyal.net/kitty/remote-
#: control/> facility.

# window_logo_path none


#: Where to position the window logo in the window. The value can be
#: one of: top-left, top, top-right, left, center, right, bottom-left,
#: bottom, bottom-right.

# window_logo_position bottom-right


#: The amount the logo should be faded into the background. With zero
#: being fully faded and one being fully opaque.

# window_logo_alpha 0.5


#: The time to wait before redrawing the screen when a resize event is received (in seconds).
resize_debounce_time 0.15


#: `static` | `scale` | `blank`
resize_draw_strategy static


#: Resize the OS window in steps as large as the cells, instead of
#: with the usual pixel accuracy. Combined with initial_window_width
#: and initial_window_height in number of cells, this option can be
#: used to keep the margins as small as possible when resizing the OS
#: window. Note that this does not currently work on Wayland.
resize_in_steps no


#: The list of characters for visual window selection. For example,
#: for selecting a window to focus on with focus_visible_window. The
#: value should be a series of unique numbers or alphabets, case
#: insensitive, from the set [0-9A-Z]. Specify your preference as a
#: string of characters.

# visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ


#: Ask for confirmation when closing an OS window or a tab with at
#: least this number of kitty windows in it by window manager (e.g.
#: clicking the window close button or pressing the operating system
#: shortcut to close windows) or by the close_tab action. A value of
#: zero disables confirmation. This confirmation also applies to
#: requests to quit the entire application (all OS windows, via the
#: quit action). Negative values are converted to positive ones,
#: however, with shell_integration enabled, using negative values
#: means windows sitting at a shell prompt are not counted, only
#: windows where some command is currently running. Note that if you
#: want confirmation when closing individual windows, you can map the
#: close_window_with_confirmation action.
confirm_os_window_close 0


#: START |> Tab Bar:
#
# Horizontal Alignment:     `left` | `center` | `right`
tab_bar_align left

# Edge:                     `top` | `bottom`
tab_bar_edge top

# Margin: `Top` and `Bottom`
tab_bar_margin_height 2.0 2.0
# Margin: `Left` and `Right`    ( Single value )
tab_bar_margin_width 0.0

# Style:                    `fade` | `slant` | `separator` | `powerline` | `custom` | `hidden`
tab_bar_style powerline

# Powerline Style:          `angled` | `slanted` | `round`
tab_powerline_style round

# Tab `Title Text` template.
tab_title_template "{index}"
#
#: END |> Tab Bar:


#: START => AumneChroma | Color Theme / Color Scheme

# The basic colors
foreground              #BBBCFF
background              #040206
selection_foreground    #ADAAD5
selection_background    #21202F

# Cursor colors
cursor                  #9772FF
cursor_text_color       #06020C

# URL underline color when hovering with mouse
url_color               #F0A24E

# Kitty window border colors
active_border_color     #36325B
inactive_border_color   #12121A
bell_border_color       #090910

# OS Window titlebar colors
wayland_titlebar_color system
macos_titlebar_color system

# Tab bar colors
active_tab_foreground   #040206
active_tab_background   #5962df
active_tab_font_style   bold-italic
inactive_tab_foreground #646886
inactive_tab_background #0E0A18
inactive_tab_font_style normal
tab_bar_background      #040206
tab_bar_margin_color    #040206

# Colors for marks (marked text in the terminal)
mark1_foreground #100F1D
mark1_background #B4BEFE
mark2_foreground #100F1D
mark2_background #CBA6F7
mark3_foreground #100F1D
mark3_background #74C7EC

# The 16 terminal colors

# Black
color0 #100F1D
color8 #04040C

# Red
color1 #E9733D
color9 #F2B55F

# Green
color2  #81C171
color10 #5CC75F

# Yellow
color3  #F5CF6D
color11 #ECCC88

# Blue
color4  #7E77DA
color12 #8183F2

# Magenta
color5  #B872BF
color13 #AE88DF

# Cyan
color6  #7dcdd8
color14 #7dcdd8

# White
color7  #ADAAD5
color15 #C0C8ED

#: END => AumneChroma | Color Theme / Color Scheme


#: The opacity of the background. A number between zero and one, where
#: one is opaque and zero is fully transparent. This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background, so that things like the status bar in vim, powerline
#: prompts, etc. still look good. But it means that if you use a color
#: theme with a background color in your editor, it will not be
#: rendered as transparent. Instead you should change the default
#: background color in your kitty config and not use a background
#: color in the editor color scheme. Or use the escape codes to set
#: the terminals default colors in a shell script to launch your
#: editor. Be aware that using a value less than 1.0 is a (possibly
#: significant) performance hit. If you want to dynamically change
#: transparency of windows, set dynamic_background_opacity to yes
#: (this is off by default as it has a performance cost). Changing
#: this option when reloading the config will only work if
#: dynamic_background_opacity was enabled in the original config.
background_opacity 1.0


#: Path to a background image. Must be in PNG format.

# background_image none


#: Whether to tile, scale or clamp the background image. The value can
#: be one of tiled, mirror-tiled, scaled, clamped.

# background_image_layout tiled


#: When background image is scaled, whether linear interpolation
#: should be used.

# background_image_linear no


#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.
#: Changing this option by reloading the config is not supported.
dynamic_background_opacity no


#: How much to tint the background image by the background color. The
#: tint is applied only under the text area, not margin/borders. This
#: option makes it easier to read the text. Tinting is done using the
#: current background color for each window. This option applies only
#: if background_opacity is set and transparent windows are supported
#: or background_image is set.

# background_tint 0.9


#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).
dim_opacity 1.0


#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login and --interactive to ensure that the shell starts in
#: interactive mode and reads its startup rc files.
shell fish


#: The terminal based text editor (such as vim or nano) to use when
#: editing the kitty config file or similar tasks.

#: The default value of . means to use the environment variables
#: VISUAL and EDITOR in that order. If these variables aren't set,
#: kitty will run your shell ($SHELL -l -i -c env) to see if your
#: shell startup rc files set VISUAL or EDITOR. If that doesn't work,
#: kitty will cycle through various known editors (vim, emacs, etc.)
#: and take the first one that exists on your system.
editor nvim


#: Close the window when the child process (shell) exits. With the
#: default value no, the terminal will remain open when the child
#: exits as long as there are still processes outputting to the
#: terminal (for example disowned or backgrounded processes). When
#: enabled with yes, the window will close as soon as the child
#: process exits. Note that setting it to yes means that any
#: background processes still using the terminal can fail silently
#: because their stdout/stderr/stdin no longer work.

# close_on_child_death no


#: Disable remote control.
#: - [HelpDoc](https://man.archlinux.org/man/community/kitty/kitty.conf.5.en#allow_remote_control)
allow_remote_control no


#: Listen to the specified UNIX socket for remote control connections.
#: Note that this will apply to all kitty instances. It can be
#: overridden by the kitty --listen-on command line option, which also
#: supports listening on a TCP socket. This option accepts only UNIX
#: sockets, such as unix:${TEMP}/mykitty or unix:@mykitty (on Linux).
#: Environment variables are expanded and relative paths are resolved
#: with respect to the temporary directory. If {kitty_pid} is present,
#: then it is replaced by the PID of the kitty process, otherwise the
#: PID of the kitty process is appended to the value, with a hyphen.
#: See the help for kitty --listen-on for more details. Note that this
#: will be ignored unless allow_remote_control is set to either: yes,
#: socket or socket-only. Changing this option by reloading the config
#: is not supported.

# listen_on none


#: Specify the environment variables to be set in all child processes.
#: Using the name with an equal sign (e.g. env VAR=) will set it to
#: the empty string. Specifying only the name (e.g. env VAR) will
#: remove the variable from the child process' environment. Note that
#: environment variables are expanded recursively, for example::
#:     env VAR1=a
#:     env VAR2=${HOME}/${VAR1}/b
#: The value of VAR2 will be <path to home directory>/a/b.

# env


#: Path to python file which will be loaded for watchers
#: <https://sw.kovidgoyal.net/kitty/launch/#watchers>. Can be
#: specified more than once to load multiple watchers. The watchers
#: will be added to every kitty window. Relative paths are resolved
#: relative to the kitty config directory. Note that reloading the
#: config will only affect windows created after the reload.

# watcher


#: The interval to periodically check if an update to kitty is
#: available (in hours). If an update is found, a system notification
#: is displayed informing you of the available update. The default is
#: to check every 24 hours, set to zero to disable. Update checking is
#: only done by the official binary builds. Distro packages or source
#: builds do not do update checking. Changing this option by reloading
#: the config is not supported.
update_check_interval 0


#: Path to a session file to use for all kitty instances.
#: Can be overridden by using the kitty --session command line option for individual instances.
#: - See [Sessions](https://sw.kovidgoyal.net/kitty/overview/#sessions) in the Kitty Documentation for details.
startup_session none


#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: possible actions are: write-clipboard, read-clipboard, write-
#: primary, read-primary, read-clipboard-ask, read-primary-ask. The
#: default is to allow writing to the clipboard and primary selection
#: and to ask for permission when a program tries to read from the
#: clipboard. Note that disabling the read confirmation is a security
#: risk as it means that any program, even the ones running on a
#: remote server via SSH can read your clipboard.
clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask


#: The maximum size (in MB) of data from programs running in kitty
#: that will be stored for writing to the system clipboard. A value of
#: zero means no size limit is applied. See also clipboard_control.

# clipboard_max_size 64


#: Process hyperlink escape sequences (OSC 8). If disabled OSC 8
#: escape sequences are ignored. Otherwise they become clickable
#: links, that you can click with the mouse or by using the hints
#: kitten <https://sw.kovidgoyal.net/kitty/kittens/hints/>. The
#: special value of ask means that kitty will ask before opening the
#: link when clicked.

# allow_hyperlinks yes


#: See [Shell Integration](https://sw.kovidgoyal.net/kitty/shell-integration/) for details.
# shell_integration enabled


#: Control whether programs running in the terminal can request new
#: windows to be created. The canonical example is clone-in-kitty
#: <https://sw.kovidgoyal.net/kitty/shell-integration/#clone-shell>.
#: By default, kitty will ask for permission for each clone request.
#: Allowing cloning unconditionally gives programs running in the
#: terminal (including over SSH) permission to execute arbitrary code,
#: as the user who is running the terminal, on the computer that the
#: terminal is running on.

# allow_cloning ask


#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on "Stack Overflow"
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.

# term xterm-kitty


#: Choose between Wayland and X11 backends. By default, an appropriate
#: backend based on the system state is chosen automatically. Set it
#: to x11 or wayland to force the choice. Changing this option by
#: reloading the config is not supported.

# linux_display_server auto


#: Keybinding HelpDoc:
#:  - The full list of actions that can be mapped to key presses is available:
#:  [here](https://sw.kovidgoyal.net/kitty/actions/)

#: Special modifier key alias for default shortcuts. You can change
#: the value of this option to alter all default shortcuts that use
#: `kitty_mod`.
kitty_mod ctrl+shift+alt

#: Remove all shortcut definitions up to this point. Useful, for
#: instance, to remove the default shortcuts.
clear_all_shortcuts yes

#: Aum Custom Bindings
#:  - Keycode docs:             https://sw.kovidgoyal.net/kitty/keyboard-protocol/#key-codes
#:  - Modifier docs:            https://sw.kovidgoyal.net/kitty/keyboard-protocol/#modifiers
#
#:      \x1b[           = CSI
#:      97 to 122       = Decimal value of character ( ASCII, 'a' to 'z'. )
#:      6               = Sum of bits for Ctrl and Shift Modifiers. ( 1 + Mods ) [ Shift = 1, Alt = 2, Ctrl = 4 ]
#:      u               = Unicode
# map ctrl+shift+a send_text all \x1b[97;6u
# map ctrl+shift+b send_text all \x1b[98;6u
# map ctrl+shift+c send_text all \x1b[99;6u
# map ctrl+shift+d send_text all \x1b[100;6u
# map ctrl+shift+e send_text all \x1b[101;6u
# map ctrl+shift+f send_text all \x1b[102;6u
# # map ctrl+shift+g send_text all \x1b[103;6u
# map ctrl+shift+h send_text all \x1b[104;6u
# map ctrl+shift+i send_text all \x1b[105;6u
# map ctrl+shift+j send_text all \x1b[106;6u
# map ctrl+shift+k send_text all \x1b[107;6u
# map ctrl+shift+l send_text all \x1b[108;6u
# map ctrl+shift+m send_text all \x1b[109;6u
# map ctrl+shift+n send_text all \x1b[110;6u
# map ctrl+shift+o send_text all \x1b[111;6u
# map ctrl+shift+p send_text all \x1b[112;6u
# map ctrl+shift+q send_text all \x1b[113;6u
# map ctrl+shift+r send_text all \x1b[114;6u
# map ctrl+shift+s send_text all \x1b[115;6u
# map ctrl+shift+t send_text all \x1b[116;6u
# map ctrl+shift+u send_text all \x1b[117;6u
# map ctrl+shift+v send_text all \x1b[118;6u
# map ctrl+shift+w send_text all \x1b[119;6u
# map ctrl+shift+x send_text all \x1b[120;6u
# map ctrl+shift+y send_text all \x1b[121;6u
# map ctrl+shift+z send_text all \x1b[122;6u

# |> Scrolling:
map ctrl+shift+up           scroll_line_up
map ctrl+shift+down         scroll_line_down
map ctrl+shift+page_down    scroll_page_down
map ctrl+shift+page_up      scroll_page_up

# |> Copy/Paste:
map cmd+c               copy_to_clipboard
map kitty_mod+c         copy_to_clipboard
map kitty_mod+v         paste_from_clipboard

# |> Splits:
# |> NOTE: `new_window` == split
map ctrl+shift+enter    new_window
map kitty_mod+w         close_window
# |> Movement between splits
map ctrl+shift+]        next_window
map ctrl+shift+[        previous_window

# |> Layouts:
map kitty_mod+l         next_layout

# |> Tabs:
map kitty_mod+t         new_tab
map kitty_mod+q         close_tab
map ctrl+tab            next_tab
map ctrl+shift+tab      previous_tab

# |> Resizing
map ctrl+shift+f10      toggle_maximized
map ctrl+shift+f11      toggle_fullsrceen
map kitty_mod+r         start_resizing_window

# |> Opacity
map kitty_mod+a>l       set_background_opacity -0.1
map kitty_mod+a>m       set_background_opacity +0.1

# |> History
map ctrl+shift+g        show_last_command_output
map kitty_mod+h         show_scrollback

# |> Special
map ctrl+shift+f2       edit_config_file
#: Reload Config File
map ctrl+shift+f5       load_config_file
map kitty_mod+e         open_url_with_hints
map kitty_mod+u         input_unicode_character

# |> Font Size
map ctrl+shift+equal    change_font_size all +1.0
map ctrl+shift+plus     change_font_size all +1.0
map ctrl+shift+minus    change_font_size all -1.0

#: END OF FILE
