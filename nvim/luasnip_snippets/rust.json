{
  "fn_void": {
    "prefix": "fn_void",
    "description": "Snippet for: function definition without return value.",
    "body": [
      "fn $1($2) {",
      "\t$0",
      "\\}"
    ]
  },
  "fn_with_return_type": {
    "prefix": "fn_with_return_type",
    "description": "Snippet for: function definition with return value.",
    "body": [
      "fn $1($2) -> $3 {",
      "\t$0",
      "\\}"
    ]
  },
  "strfrom": {
    "prefix": "strfrom",
    "description": "Snippet for: String::from().",
    "body": "String::from(\"$0\")",
    "luasnip": {
      "autotrigger": true
    }
  },
  "vecnew": {
    "prefix": "vecnew",
    "description": "Snippet for: Vec::new().",
    "body": "Vec::new()$0",
    "luasnip": {
      "autotrigger": true
    }
  },
  "vecint": {
    "prefix": "vecint",
    "description": "Snippet for: Vec<i32>.",
    "body": "Vec<i32>$0",
    "luasnip": {
      "autotrigger": true
    }
  },
  "arrint": {
    "prefix": "arrint",
    "description": "Snippet for: [i32; x].",
    "body": "[i32; $1]$0",
    "luasnip": {
      "autotrigger": true
    }
  },
  "vecchar": {
    "prefix": "vecchar",
    "description": "Snippet for: Vec<char>.",
    "body": "Vec<char>$0",
    "luasnip": {
      "autotrigger": true
    }
  },
  "vecstr": {
    "prefix": "vecstr",
    "description": "Snippet for: Vec<String>.",
    "body": "Vec<String>$0",
    "luasnip": {
      "autotrigger": true
    }
  },
  "colstr": {
    "prefix": "colstr",
    "description": "Snippet for: collect::<String>().",
    "body": "collect::<String>()$0",
    "luasnip": {
      "autotrigger": true
    }
  },
  "colvec": {
    "prefix": "colvec",
    "description": "Snippet for: collect::<Vec<T>>().",
    "body": "collect::<Vec<$0>>()",
    "luasnip": {
      "autotrigger": true
    }
  },
  "reverse_string": {
    "prefix": "reverse_string",
    "description": "Snippet for: Reversing String or &str.",
    "body": "let reversed: String = $0.chars().rev().collect();"
  },
  "struct": {
    "prefix": "struct",
    "description": "Snippet for: 'struct' definition.",
    "body": [
      "struct $1 {",
      "\t$2: $3,$0",
      "\\}"
    ]
  },
  "struct_with_new": {
    "prefix": "struct_with_new",
    "description": "Snippet for: 'struct' definition with `new()` constructor.",
    "body": [
      "struct $1 {",
      "\t$2: $3,$4",
      "\\}",
      "",
      "impl $1 {",
      "\tfn new() -> Self {",
      "\t\t$1 {",
      "\t\t\t$2$0",
      "\t\t\\}",
      "\t\\}",
      "\\}"
    ]
  },
  "enum": {
    "prefix": "enum",
    "description": "Snippet for: 'enum' keyword.",
    "body": [
      "enum $1 {",
      "\t$2,$0",
      "\\}"
    ]
  },
  "trait": {
    "prefix": "trait",
    "description": "Snippet for: 'trait' keyword.",
    "body": [
      "trait $1 {",
      "\t$0",
      "\\}"
    ]
  },
  "impl": {
    "prefix": "impl",
    "description": "Snippet for: 'impl' keyword.",
    "body": [
      "impl $1 {",
      "\t$0",
      "\\}"
    ]
  },
  "impl_new": {
    "prefix": "impl_new",
    "description": "Snippet for: 'impl' block with new().",
    "body": [
      "impl $1 {",
      "\tfn new() -> Self {",
      "\t\t$1 {",
      "\t\t\t$2$0",
      "\t\t\\}",
      "\t\\}",
      "\\}"
    ]
  },
  "derive": {
    "prefix": "derive",
    "description": "Snippet for: derive.",
    "body": "#[derive($0)]"
  },
  "derive_debug": {
    "prefix": "derive_debug",
    "description": "Snippet for: derive debug.",
    "body": "#[derive(Debug)]$0"
  },
  "derive_clone": {
    "prefix": "derive_clone",
    "description": "Snippet for: derive clone.",
    "body": "#[derive(Clone)]$0"
  },
  "derive_copy": {
    "prefix": "derive_copy",
    "description": "Snippet for: derive copy.",
    "body": "#[derive(Copy)]$0"
  },
  "derive_clonecopy": {
    "prefix": "derive_clonecopy",
    "description": "Snippet for: derive clone and copy.",
    "body": "#[derive(Clone, Copy)]$0"
  },
  "match": {
    "prefix": "match",
    "description": "Snippet for: 'match' keyword.",
    "body": [
      "match $1 {",
      "\t$2 => $3,",
      "\t_ => $0,",
      "\\}"
    ]
  },
  "loop": {
    "prefix": "loop",
    "description": "Snippet for: 'loop' keyword.",
    "body": [
      "loop '$1 {",
      "\t$0",
      "\\}"
    ]
  },
  "while": {
    "prefix": "while",
    "description": "Snippet for: while loop.",
    "body": [
      "while $1 {",
      "\t$0",
      "\\}"
    ]
  },
  "whilelet": {
    "prefix": "whilelet",
    "description": "Snippet for: while let loop.",
    "body": [
      "while let $1 = $2 {",
      "\t$0",
      "\\}"
    ]
  },
  "for": {
    "prefix": "for",
    "description": "Snippet for: for loop.",
    "body": [
      "for $1 in $2 {",
      "\t$0",
      "\\}"
    ]
  },
  "print": {
    "prefix": "print",
    "description": "Snippet for: println!.",
    "body": "println!(\"$1\");$0"
  },
  "print_var": {
    "prefix": "print_var",
    "description": "Snippet for: println! with variable.",
    "body": "println!(\"{\\}\", $1);$0"
  },
  "int": {
    "prefix": "int",
    "description": "Snippet for: i32.",
    "body": "i32"
  },
  "var_int": {
    "prefix": "var_int",
    "description": "Snippet for: i32 variable.",
    "body": "let $1: i32 = $2;$0"
  },
  "var_int_mut": {
    "prefix": "var_int_mut",
    "description": "Snippet for: Mutable i32 variable.",
    "body": "let mut $1: i32 = $2;$0"
  },
  "var_float": {
    "prefix": "var_float",
    "description": "Snippet for: f64 variable.",
    "body": "let $1: f64 = $2;$0"
  },
  "var_float_mut": {
    "prefix": "var_float_mut",
    "description": "Snippet for: Mutable f64 variable.",
    "body": "let mut $1: f64 = $2;$0"
  },
  "var_string": {
    "prefix": "var_string",
    "description": "Snippet for: String variable.",
    "body": "let $1: String = \"$2\".to_string();$0"
  },
  "var_string_mut": {
    "prefix": "var_string_mut",
    "description": "Snippet for: Mutable String variable.",
    "body": "let mut $1: String = \"$2\".to_string();$0"
  },
  "string": {
    "prefix": "string",
    "description": "Snippet for: 'String' type.",
    "body": "String$0"
  },
  "as": {
    "prefix": "as",
    "description": "Snippet for: 'as' keyword.",
    "body": "as $0"
  },
  "async": {
    "prefix": "async",
    "description": "Snippet for: 'async' keyword.",
    "body": "async $0"
  },
  "await": {
    "prefix": "await",
    "description": "Snippet for: 'await' keyword.",
    "body": "await $0"
  },
  "break": {
    "prefix": "break",
    "description": "Snippet for: 'break' keyword.",
    "body": "break$0"
  },
  "const": {
    "prefix": "const",
    "description": "Snippet for: 'const' keyword.",
    "body": "const $0"
  },
  "continue": {
    "prefix": "continue",
    "description": "Snippet for: 'continue' keyword.",
    "body": "continue$0"
  },
  "crate": {
    "prefix": "crate",
    "description": "Snippet for: 'crate' keyword.",
    "body": "crate $0"
  },
  "dyn": {
    "prefix": "dyn",
    "description": "Snippet for: 'dyn' keyword.",
    "body": "dyn $0"
  },
  "else": {
    "prefix": "else",
    "description": "Snippet for: 'else' keyword.",
    "body": "else $0"
  },
  "extern": {
    "prefix": "extern",
    "description": "Snippet for: 'extern' keyword.",
    "body": "extern $0"
  },
  "false": {
    "prefix": "false",
    "description": "Snippet for: 'false' keyword.",
    "body": "false$0"
  },
  "true": {
    "prefix": "true",
    "description": "Snippet for: 'true' keyword.",
    "body": "true$0"
  },
  "in": {
    "prefix": "in",
    "description": "Snippet for: 'in' keyword.",
    "body": "in $0"
  },
  "if": {
    "prefix": "if",
    "description": "Snippet for: 'if' keyword.",
    "body": [
      "if $1 {",
      "\t$0",
      "\\}"
    ]
  },
  "iflet": {
    "prefix": "iflet",
    "description": "Snippet for: 'if let'.",
    "body": [
      "if let $1 = $2 {",
      "\t$0",
      "\\}"
    ]
  },
  "let": {
    "prefix": "let",
    "description": "Snippet for: 'let' keyword.",
    "body": "let $0"
  },
  "mod": {
    "prefix": "mod",
    "description": "Snippet for: 'mod' keyword.",
    "body": "mod $0"
  },
  "move": {
    "prefix": "move",
    "description": "Snippet for: 'move' keyword.",
    "body": "move $0"
  },
  "mut": {
    "prefix": "mut",
    "description": "Snippet for: 'mut' keyword.",
    "body": "mut$0"
  },
  "pub": {
    "prefix": "pub",
    "description": "Snippet for: 'pub' keyword.",
    "body": "pub $0"
  },
  "ref": {
    "prefix": "ref",
    "description": "Snippet for: 'ref' keyword.",
    "body": "ref $0"
  },
  "return": {
    "prefix": "return",
    "description": "Snippet for: 'return' keyword.",
    "body": "return $0;"
  },
  "Self": {
    "prefix": "Self",
    "description": "Snippet for: 'Self' keyword.",
    "body": "Self$0"
  },
  "self": {
    "prefix": "self",
    "description": "Snippet for: 'self' keyword.",
    "body": "self$0"
  },
  "static": {
    "prefix": "static",
    "description": "Snippet for: 'static' keyword.",
    "body": "static $0"
  },
  "super": {
    "prefix": "super",
    "description": "Snippet for: 'super' keyword.",
    "body": "super $0"
  },
  "type": {
    "prefix": "type",
    "description": "Snippet for: 'type' keyword.",
    "body": "type $0"
  },
  "union": {
    "prefix": "union",
    "description": "Snippet for: 'union' keyword.",
    "body": "union $0"
  },
  "unsafe": {
    "prefix": "unsafe",
    "description": "Snippet for: 'unsafe' keyword.",
    "body": [
      "unsafe {",
      "\t$0",
      "\\}"
    ]
  },
  "use": {
    "prefix": "use",
    "description": "Snippet for: 'use' keyword.",
    "body": "use $0"
  },
  "where": {
    "prefix": "where",
    "description": "Snippet for: 'where' keyword.",
    "body": "where $0"
  }
}
