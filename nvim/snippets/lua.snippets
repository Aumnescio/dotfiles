snippet use_lazy "`lazy.nvim`: Add new plugin."
	{
		"${0:plugin}",
	},

snippet lazy_true "`lazy.nvim`: 'lazy = true'"
	lazy = true,$0

snippet lazy_version_false "`lazy.nvim`: 'version = false'"
	version = false,$0

snippet lazy_init "`lazy.nvim`: init function."
	init = function()
		$0
	end

snippet lazy_opts "`lazy.nvim`: opts table."
	opts = {
		$0
	},

snippet lazy_dependencies "`lazy.nvim`: 'dependencies = {}'"
	dependencies = {
		"${0:some/plugin}",
	},

snippet lazy_keys "`lazy.nvim`: keys function."
	keys = function()
		local ret = {}
		for _, key in ipairs({ "${1:key_to_bind}" }) do
			ret[#ret + 1] = { key, mode = { "${0:n|x|i|o}" } }
		end
		return ret
	end,

snippet lazy_config "`lazy.nvim`: config function."
	config = function(_, opts)
		$0
	end,

snippet print_text "Normal print."
	print("$0")

snippet print_var_inspect "Print with `vim.inspect`."
	print(vim.inspect($0))

snippet print_var_formatted "Print a message and variable."
	print(string.format("$1: %s", vim.inspect($0)))

snippet require_setup "Call setup on some file. Used to load plugins."
	require("${1:plugin_name}").setup(${0:opts})

snippet bindkey "Bind a new key to a command."
	bindkey("${1:mode}", "${2:key}", "${3:command}", opts)

snippet map_legendary_key "Create new keybinding in `Legendary.nvim`."
	{ "${1:key}",    "${2:command}",    description = "${0:desc}",    mode = { 'n', 'o', 'x' },    opts = opts },

snippet new_legendary_command "Create a new `legendary.nvim` command."
	{
		"$1",
		function()
			$0
		end,
		description = "$2"
	},

snippet nvim_cmd "Execute a Neovim Command."
	vim.api.nvim_cmd({ cmd = "$1", args = { "$0" }}, {})

snippet create_nvim_autocmd "Create a autocmd."
	local ${1:augroup_name}_aumgroup = vim.api.nvim_create_augroup("My${2:augroup_name}", { clear = true })
	vim.api.nvim_create_autocmd("${3:TriggerEvent}", {
		pattern = { '${4:pattern}' },
		callback = function()
			${0:code}
		end,
		group = $1_aumgroup
	})

snippet func "Lua function."
	function $1($2)
		$0
	end

snippet func_local "Lua function (Local)."
	local function $1($2)
		$0
	end

snippet if "Lua `if`."
	if $1 then
		$0
	end

snippet if_else "Lua `if else`."
	if $1 then
		$2
	else
		$0
	end

snippet if__elseif_else "Lua `if elseif else`."
	if $1 then
		$2
	elseif $3 then
		$4
	else
		$0
	end

snippet get_current_line "Get the current line from the active Neovim buffer, as a string."
	vim.api.nvim_get_current_line()

snippet get_cursor_location_row_col "Get current `row` and `column` of `Cursor Position`."
	local cur_row, cur_col = unpack(vim.api.nvim_win_get_cursor(0))

snippet get_character_after_cursor "Get the `character` to the right of `Cursor Position`."
	local current_line = vim.api.nvim_get_current_line()
	local char_after_cursor = string.sub(current_line, cur_col + 2, cur_col + 2)

snippet set_buf_text "Write text into Neovim buffer at `Cursor Position`."
	vim.api.nvim_buf_set_text(0, cur_row - 1, cur_col, cur_row - 1, cur_col, {"$0"})

snippet set_buf_text_and_advance_cursor "Write text into Neovim buffer at `Cursor Position`, and place the cursor at the end of the inserted text."
	local str = "$0"
	vim.api.nvim_buf_set_text(0, cur_row - 1, cur_col, cur_row - 1, cur_col, { str })
	vim.api.nvim_win_set_cursor(0, { cur_row, cur_col + string_len(str) })

snippet choice_luasnip "LuaSnip: Choice Snippet"
	choice(${1:<location-index>}, {
		snippet_node(nil, { insert($1, "${2:<initial-choice>}")  }),
		snippet_node(nil, { text("${3:<other-choice>}")      }),
	})$0

snippet state "Snippet for my `STATE: Something` thing."
	( STATE: $0 )

snippet comment "Lua `comment`."
	-- $0

snippet end_of_file "`End of File` comment. I like it..."
	-- End of File
