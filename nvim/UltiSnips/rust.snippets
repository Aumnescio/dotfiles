snippet fn_void "Snippet for: function definition without return value."
fn $1($2) {
	$0
}
endsnippet

snippet fn_with_return_type "Snippet for: function definition with return value."
fn $1($2) -> $3 {
	$0
}
endsnippet

snippet strfrom "Snippet for: String::from()." iA
String::from("$0")
endsnippet

snippet vecnew "Snippet for: Vec::new()." iA
Vec::new()$0
endsnippet

snippet vecint "Snippet for: Vec<i32>." iA
Vec<i32>$0
endsnippet

snippet arrint "Snippet for: [i32; x]." iA
[i32; $1]$0
endsnippet

snippet vecchar "Snippet for: Vec<char>." iA
Vec<char>$0
endsnippet

snippet vecstr "Snippet for: Vec<String>." iA
Vec<String>$0
endsnippet

snippet colstr "Snippet for: collect::<String>()." iA
collect::<String>()$0
endsnippet

snippet colvec "Snippet for: collect::<Vec<T>>()." iA
collect::<Vec<$0>>()
endsnippet

snippet reverse_string "Snippet for: Reversing String or &str." b
let reversed: String = $0.chars().rev().collect();
endsnippet

snippet struct "Snippet for: 'struct' definition."
struct $1 {
	$2: $3,$0
}
endsnippet

snippet struct_with_new "Snippet for: 'struct' definition with `new()` constructor."
struct $1 {
	$2: $3,$4
}

impl $1 {
	fn new() -> Self {
		$1 {
			$2$0
		}
	}
}
endsnippet

snippet enum "Snippet for: 'enum' keyword."
enum $1 {
	$2,$0
}
endsnippet

snippet trait "Snippet for: 'trait' keyword."
trait $1 {
	$0
}
endsnippet

snippet impl "Snippet for: 'impl' keyword."
impl $1 {
	$0
}
endsnippet

snippet impl_new "Snippet for: 'impl' block with new()."
impl $1 {
	fn new() -> Self {
		$1 {
			$2$0
		}
	}
}
endsnippet

snippet derive "Snippet for: derive." b
#[derive($0)]
endsnippet

snippet derive_debug "Snippet for: derive debug." b
#[derive(Debug)]$0
endsnippet

snippet derive_clone "Snippet for: derive clone." b
#[derive(Clone)]$0
endsnippet

snippet derive_copy "Snippet for: derive copy." b
#[derive(Copy)]$0
endsnippet

snippet derive_clonecopy "Snippet for: derive clone and copy." b
#[derive(Clone, Copy)]$0
endsnippet

snippet match "Snippet for: 'match' keyword."
match $1 {
	$2 => $3,
	_ => $0,
}
endsnippet

snippet loop "Snippet for: 'loop' keyword."
loop '$1 {
	$0
}
endsnippet

snippet while "Snippet for: while loop."
while $1 {
	$0
}
endsnippet

snippet whilelet "Snippet for: while let loop."
while let $1 = $2 {
	$0
}
endsnippet

snippet for "Snippet for: for loop."
for $1 in $2 {
	$0
}
endsnippet

snippet print "Snippet for: println!."
println!("$1");$0
endsnippet

snippet print_var "Snippet for: println! with variable."
println!("{}", $1);$0
endsnippet

snippet int "Snippet for: i32."
i32
endsnippet

snippet var_int "Snippet for: i32 variable."
let $1: i32 = $2;$0
endsnippet

snippet var_int_mut "Snippet for: Mutable i32 variable."
let mut $1: i32 = $2;$0
endsnippet

snippet var_float "Snippet for: f64 variable."
let $1: f64 = $2;$0
endsnippet

snippet var_float_mut "Snippet for: Mutable f64 variable."
let mut $1: f64 = $2;$0
endsnippet

snippet var_string "Snippet for: String variable."
let $1: String = "$2".to_string();$0
endsnippet

snippet var_string_mut "Snippet for: Mutable String variable."
let mut $1: String = "$2".to_string();$0
endsnippet

snippet string "Snippet for: 'String' type."
String$0
endsnippet

snippet as "Snippet for: 'as' keyword."
as $0
endsnippet

snippet async "Snippet for: 'async' keyword."
async $0
endsnippet

snippet await "Snippet for: 'await' keyword."
await $0
endsnippet

snippet break "Snippet for: 'break' keyword."
break$0
endsnippet

snippet const "Snippet for: 'const' keyword."
const $0
endsnippet

snippet continue "Snippet for: 'continue' keyword."
continue$0
endsnippet

snippet crate "Snippet for: 'crate' keyword."
crate $0
endsnippet

snippet dyn "Snippet for: 'dyn' keyword."
dyn $0
endsnippet

snippet else "Snippet for: 'else' keyword."
else $0
endsnippet

snippet extern "Snippet for: 'extern' keyword."
extern $0
endsnippet

snippet false "Snippet for: 'false' keyword."
false$0
endsnippet

snippet true "Snippet for: 'true' keyword."
true$0
endsnippet

snippet in "Snippet for: 'in' keyword."
in $0
endsnippet

snippet if "Snippet for: 'if' keyword."
if $1 {
	$0
}
endsnippet

snippet iflet "Snippet for: 'if let'."
if let $1 = $2 {
	$0
}
endsnippet

snippet let "Snippet for: 'let' keyword."
let $0
endsnippet

snippet mod "Snippet for: 'mod' keyword."
mod $0
endsnippet

snippet move "Snippet for: 'move' keyword."
move $0
endsnippet

snippet mut "Snippet for: 'mut' keyword."
mut$0
endsnippet

snippet pub "Snippet for: 'pub' keyword."
pub $0
endsnippet

snippet ref "Snippet for: 'ref' keyword."
ref $0
endsnippet

snippet return "Snippet for: 'return' keyword."
return $0;
endsnippet

snippet Self "Snippet for: 'Self' keyword."
Self$0
endsnippet

snippet self "Snippet for: 'self' keyword."
self$0
endsnippet

snippet static "Snippet for: 'static' keyword."
static $0
endsnippet

snippet super "Snippet for: 'super' keyword."
super $0
endsnippet

snippet type "Snippet for: 'type' keyword."
type $0
endsnippet

snippet union "Snippet for: 'union' keyword."
union $0
endsnippet

snippet unsafe "Snippet for: 'unsafe' keyword."
unsafe {
	$0
}
endsnippet

snippet use "Snippet for: 'use' keyword."
use $0
endsnippet

snippet where "Snippet for: 'where' keyword."
where $0
endsnippet








